Index: hibernate3/.cvsignore
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/.cvsignore,v
retrieving revision 1.1
diff -u -r1.1 .cvsignore
--- hibernate3/.cvsignore	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/.cvsignore	13 Feb 2005 18:04:09 -0000
@@ -6,3 +6,4 @@
 cachedir
 .classpath
 .project
+nanocontainer-hibernate3.iml
\ No newline at end of file
Index: hibernate3/project.xml
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/project.xml,v
retrieving revision 1.4
diff -u -r1.4 project.xml
--- hibernate3/project.xml	11 Feb 2005 21:11:42 -0000	1.4
+++ hibernate3/project.xml	13 Feb 2005 18:05:01 -0000
@@ -30,7 +30,7 @@
         <dependency>
             <groupId>hibernate</groupId>
 			<artifactId>hibernate</artifactId>
-            <version>3.0beta1</version>
+            <version>3.0beta4</version>
         </dependency>
         <dependency>
             <id>commons-logging</id>
Index: hibernate3/src/java/org/nanocontainer/hibernate3/ConstructableConfiguration.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/ConstructableConfiguration.java,v
retrieving revision 1.1
diff -u -r1.1 ConstructableConfiguration.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/ConstructableConfiguration.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/ConstructableConfiguration.java	15 Jan 2005 13:55:49 -0000
@@ -1,47 +1,48 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import java.io.File;
-import java.net.URL;
-
-import org.hibernate.HibernateException;
-import org.hibernate.cfg.Configuration;
-import org.w3c.dom.Document;
-
-/**
- * Constructable hibernate configuration. not a rocket science, just a wrapper aroung
- * various configure() methods... see respective hibernate javadocs.
- * 
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $
- */
-public class ConstructableConfiguration extends Configuration {
-	
-	public ConstructableConfiguration() throws HibernateException {
-		this.configure();
-	}
-	
-	public ConstructableConfiguration(URL url) throws HibernateException {
-		this.configure(url);
-	}
-	public ConstructableConfiguration(String resource) throws HibernateException {
-		this.configure(resource);
-	}
-	
-	public ConstructableConfiguration(File configFile) throws HibernateException {
-		this.configure(configFile);
-	}
-	
-	public ConstructableConfiguration(Document document)  throws HibernateException {
-		this.configure(document);
-	}
-
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import java.io.File;
+import java.net.URL;
+
+import org.hibernate.HibernateException;
+import org.hibernate.cfg.Configuration;
+import org.w3c.dom.Document;
+
+/**
+ * Constructable hibernate configuration. not a rocket science, just a wrapper aroung
+ * various configure() methods... see respective hibernate javadocs.
+ * 
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $
+ */
+public class ConstructableConfiguration extends Configuration {
+	
+	public ConstructableConfiguration() throws HibernateException {
+		this.configure();
+	}
+	
+	public ConstructableConfiguration(URL url) throws HibernateException {
+		this.configure(url);
+	}
+	public ConstructableConfiguration(String resource) throws HibernateException {
+		this.configure(resource);
+	}
+	
+	public ConstructableConfiguration(File configFile) throws HibernateException {
+		this.configure(configFile);
+	}
+	
+	public ConstructableConfiguration(Document document)  throws HibernateException {
+		this.configure(document);
+	}
+
+}
Index: hibernate3/src/java/org/nanocontainer/hibernate3/FailoverSessionDelegator.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/FailoverSessionDelegator.java,v
retrieving revision 1.1
diff -u -r1.1 FailoverSessionDelegator.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/FailoverSessionDelegator.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/FailoverSessionDelegator.java	18 Jan 2005 15:04:10 -0000
@@ -1,80 +1,80 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import java.sql.Connection;
-
-import org.hibernate.HibernateException;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-
-/**
- * Session delegator with failover behaviour in case of hibernate exception. Old
- * session is disposed and new one is obtained transparently. Session creation
- * is done lazily.
- * 
- * @author Konstantin Pribluda
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $
- */
-public class FailoverSessionDelegator extends SessionDelegator {
-
-    private SessionFactory sessionFactory;
-
-    private Session session = null;
-
-    public FailoverSessionDelegator(SessionFactory sessionFactory) {
-        this.sessionFactory = sessionFactory;
-    }
-
-    public SessionFactory getSessionFactory() {
-        return this.sessionFactory;
-    }
-
-    /**
-     * Obtain hibernate session in lazy way.
-     */
-    public Session getSession() {
-        if (this.session == null) {
-            try {
-                this.session = this.sessionFactory.openSession();
-            } catch (HibernateException ex) {
-                throw this.handleException(ex);
-            }
-        }
-
-        return this.session;
-    }
-
-    public Connection close() throws HibernateException {
-        try {
-            return this.getSession().close();
-        } catch (HibernateException ex) {
-            this.session = null;
-            throw this.handleException(ex);
-        } finally {
-            this.session = null;
-        }
-    }
-
-    public void invalidateSession() throws HibernateException {
-        if (this.session != null) {
-            try {
-                this.session.clear();
-                this.session.close();
-            } catch (HibernateException ex) {
-                this.session = null;
-                throw this.handleException(ex);
-            } finally {
-                this.session = null;
-            }
-        }
-    }
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import java.sql.Connection;
+
+import org.hibernate.HibernateException;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+
+/**
+ * Session delegator with failover behaviour in case of hibernate exception. Old
+ * session is disposed and new one is obtained transparently. Session creation
+ * is done lazily.
+ * 
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $
+ */
+public class FailoverSessionDelegator extends SessionDelegator {
+
+    private SessionFactory sessionFactory;
+
+    private Session session = null;
+
+    public FailoverSessionDelegator(SessionFactory sessionFactory) {
+        this.sessionFactory = sessionFactory;
+    }
+
+    public SessionFactory getSessionFactory() {
+        return this.sessionFactory;
+    }
+
+    /**
+     * Obtain hibernate session in lazy way.
+     */
+    public Session getSession() {
+        if (this.session == null) {
+            try {
+                this.session = this.sessionFactory.openSession();
+            } catch (HibernateException ex) {
+                throw this.handleException(ex);
+            }
+        }
+
+        return this.session;
+    }
+
+    public Connection close() throws HibernateException {
+        try {
+            return this.getSession().close();
+        } catch (HibernateException ex) {
+            this.session = null;
+            throw this.handleException(ex);
+        } finally {
+            this.session = null;
+        }
+    }
+
+    public void invalidateSession() throws HibernateException {
+        if (this.session != null) {
+            try {
+                this.session.clear();
+                this.session.close();
+            } catch (HibernateException ex) {
+                this.session = null;
+                throw this.handleException(ex);
+            } finally {
+                this.session = null;
+            }
+        }
+    }
+}
Index: hibernate3/src/java/org/nanocontainer/hibernate3/SessionDelegator.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/SessionDelegator.java,v
retrieving revision 1.1
diff -u -r1.1 SessionDelegator.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/SessionDelegator.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/SessionDelegator.java	13 Feb 2005 08:20:08 -0000
@@ -1,594 +1,611 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import java.io.Serializable;
-import java.sql.Connection;
-
-import org.hibernate.Criteria;
-import org.hibernate.Filter;
-import org.hibernate.FlushMode;
-import org.hibernate.HibernateException;
-import org.hibernate.LockMode;
-import org.hibernate.Query;
-import org.hibernate.ReplicationMode;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-import org.hibernate.Transaction;
-
-/**
- * Abstract base class for session delegators. delegates all calls to session
- * obtained by implementing class. error handling is also there. All methods are
- * just delegations to hibernate session.
- * 
- * @author Konstantin Pribluda
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $
- */
-public abstract class SessionDelegator implements Session {
-
-    /**
-     * Obtain hibernate session.
-     */
-    public abstract Session getSession();
-
-    /**
-     * Perform actions to dispose "burned" session properly.
-     */
-    public abstract void invalidateSession() throws HibernateException;
-
-    /**
-     * Handle an HibernateException. The default behavior throw cause again.
-     */
-    public RuntimeException handleException(HibernateException cause) throws HibernateException {
-        throw cause;
-    }
-
-    public Transaction beginTransaction() throws HibernateException {
-        try {
-            return this.getSession().beginTransaction();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void cancelQuery() throws HibernateException {
-        try {
-            this.getSession().cancelQuery();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void clear() {
-        try {
-            this.getSession().clear();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Connection close() throws HibernateException {
-        try {
-            return this.getSession().close();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Connection connection() throws HibernateException {
-        try {
-            return this.getSession().connection();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public boolean contains(Object object) {
-        try {
-            return this.getSession().contains(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void create(Object object) throws HibernateException {
-        try {
-            this.getSession().create(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void create(String entityName, Object object) throws HibernateException {
-        try {
-            this.getSession().create(entityName, object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Criteria createCriteria(Class persistentClass) {
-        try {
-            return this.getSession().createCriteria(persistentClass);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Criteria createCriteria(String entityName) {
-        try {
-            return this.getSession().createCriteria(entityName);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Query createFilter(Object collection, String queryString) throws HibernateException {
-        try {
-            return this.getSession().createFilter(collection, queryString);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Query createQuery(String queryString) throws HibernateException {
-        try {
-            return this.getSession().createQuery(queryString);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Query createSQLQuery(String sql, String returnAlias, Class returnClass) {
-        try {
-            return this.getSession().createSQLQuery(sql, returnAlias, returnClass);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Query createSQLQuery(String sql, String[] returnAliases, Class[] returnClasses) {
-        try {
-            return this.getSession().createSQLQuery(sql, returnAliases, returnClasses);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void delete(Object object) throws HibernateException {
-        try {
-            this.getSession().delete(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void disableFilter(String filterName) {
-        try {
-            this.getSession().disableFilter(filterName);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Connection disconnect() throws HibernateException {
-        try {
-            return this.getSession().disconnect();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Filter enableFilter(String filterName) {
-        try {
-            return this.getSession().enableFilter(filterName);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void evict(Object object) throws HibernateException {
-        try {
-            this.getSession().evict(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void flush() throws HibernateException {
-        try {
-            this.getSession().flush();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object get(Class clazz, Serializable id) throws HibernateException {
-        try {
-            return this.getSession().get(clazz, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object get(Class clazz, Serializable id, LockMode lockMode) throws HibernateException {
-        try {
-            return this.getSession().get(clazz, id, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object get(String entityName, Serializable id) throws HibernateException {
-        try {
-            return this.getSession().get(entityName, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object get(String entityName, Serializable id, LockMode lockMode) throws HibernateException {
-        try {
-            return this.getSession().get(entityName, id, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public LockMode getCurrentLockMode(Object object) throws HibernateException {
-        try {
-            return this.getSession().getCurrentLockMode(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Filter getEnabledFilter(String filterName) {
-        try {
-            return this.getSession().getEnabledFilter(filterName);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public String getEntityName(Object object) throws HibernateException {
-        try {
-            return this.getSession().getEntityName(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public FlushMode getFlushMode() {
-        try {
-            return this.getSession().getFlushMode();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Serializable getIdentifier(Object object) throws HibernateException {
-        try {
-            return this.getSession().getIdentifier(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Query getNamedQuery(String queryName) throws HibernateException {
-        try {
-            return this.getSession().getNamedQuery(queryName);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public SessionFactory getSessionFactory() {
-        try {
-            return this.getSession().getSessionFactory();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public boolean isConnected() {
-        try {
-            return this.getSession().isConnected();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public boolean isDirty() throws HibernateException {
-        try {
-            return this.getSession().isDirty();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public boolean isOpen() {
-        try {
-            return this.getSession().isOpen();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object load(Class theClass, Serializable id) throws HibernateException {
-        try {
-            return this.getSession().load(theClass, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object load(Class theClass, Serializable id, LockMode lockMode) throws HibernateException {
-        try {
-            return this.getSession().load(theClass, id, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void load(Object object, Serializable id) throws HibernateException {
-        try {
-            this.getSession().load(object, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object load(String entityName, Serializable id) throws HibernateException {
-        try {
-            return this.getSession().load(entityName, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object load(String entityName, Serializable id, LockMode lockMode) throws HibernateException {
-        try {
-            return this.getSession().load(entityName, id, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void lock(Object object, LockMode lockMode) throws HibernateException {
-        try {
-            this.getSession().lock(object, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void lock(String entityEntity, Object object, LockMode lockMode) throws HibernateException {
-        try {
-            this.getSession().lock(entityEntity, object, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object merge(Object object) throws HibernateException {
-        try {
-            return this.getSession().merge(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Object merge(String entityName, Object object) throws HibernateException {
-        try {
-            return this.getSession().merge(entityName, object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void reconnect() throws HibernateException {
-        try {
-            this.getSession().reconnect();
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void reconnect(Connection conn) throws HibernateException {
-        try {
-            this.getSession().reconnect(conn);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void refresh(Object object) throws HibernateException {
-        try {
-            this.getSession().refresh(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void refresh(Object object, LockMode lockMode) throws HibernateException {
-        try {
-            this.getSession().refresh(object, lockMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void replicate(Object object, ReplicationMode replicationMode) throws HibernateException {
-        try {
-            this.getSession().replicate(object, replicationMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void replicate(String entityName, Object object, ReplicationMode replicationMode) throws HibernateException {
-        try {
-            this.getSession().replicate(entityName, object, replicationMode);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Serializable save(Object object) throws HibernateException {
-        try {
-            return this.getSession().save(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void save(Object object, Serializable id) throws HibernateException {
-        try {
-            this.getSession().save(object, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public Serializable save(String entityName, Object object) throws HibernateException {
-        try {
-            return this.getSession().save(entityName, object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void save(String entityName, Object object, Serializable id) throws HibernateException {
-        try {
-            this.getSession().save(entityName, object, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void saveOrUpdate(Object object) throws HibernateException {
-        try {
-            this.getSession().saveOrUpdate(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void saveOrUpdate(String entityName, Object object) throws HibernateException {
-        try {
-            this.getSession().saveOrUpdate(entityName, object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void setFlushMode(FlushMode value) {
-        try {
-            this.getSession().setFlushMode(value);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void update(Object object) throws HibernateException {
-        try {
-            this.getSession().update(object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void update(Object object, Serializable id) throws HibernateException {
-        try {
-            this.getSession().update(object, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void update(String entityName, Object object) throws HibernateException {
-        try {
-            this.getSession().update(entityName, object);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-    public void update(String entityName, Object object, Serializable id) throws HibernateException {
-        try {
-            this.getSession().update(entityName, object, id);
-        } catch (HibernateException ex) {
-            this.invalidateSession();
-            throw this.handleException(ex);
-        }
-    }
-
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.hibernate.*;
+
+import java.io.Serializable;
+import java.sql.Connection;
+
+/**
+ * Abstract base class for session delegators. delegates all calls to session
+ * obtained by implementing class. error handling is also there. All methods are
+ * just delegations to hibernate session.
+ *
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $
+ */
+public abstract class SessionDelegator implements Session {
+
+    /**
+     * Obtain hibernate session.
+     */
+    public abstract Session getSession();
+
+    /**
+     * Perform actions to dispose "burned" session properly.
+     */
+    public abstract void invalidateSession() throws HibernateException;
+
+    /**
+     * Handle an HibernateException. The default behavior throw cause again.
+     */
+    public RuntimeException handleException(HibernateException cause) throws HibernateException {
+        throw cause;
+    }
+
+    public Transaction beginTransaction() throws HibernateException {
+        try {
+            return this.getSession().beginTransaction();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void cancelQuery() throws HibernateException {
+        try {
+            this.getSession().cancelQuery();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void clear() {
+        try {
+            this.getSession().clear();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Connection close() throws HibernateException {
+        try {
+            return this.getSession().close();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Connection connection() throws HibernateException {
+        try {
+            return this.getSession().connection();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public boolean contains(Object object) {
+        try {
+            return this.getSession().contains(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void create(Object object) throws HibernateException {
+        try {
+            this.getSession().create(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void create(String entityName, Object object) throws HibernateException {
+        try {
+            this.getSession().create(entityName, object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Criteria createCriteria(Class persistentClass) {
+        try {
+            return this.getSession().createCriteria(persistentClass);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Criteria createCriteria(String entityName) {
+        try {
+            return this.getSession().createCriteria(entityName);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Query createFilter(Object collection, String queryString) throws HibernateException {
+        try {
+            return this.getSession().createFilter(collection, queryString);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Query createQuery(String queryString) throws HibernateException {
+        try {
+            return this.getSession().createQuery(queryString);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void delete(Object object) throws HibernateException {
+        try {
+            this.getSession().delete(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void disableFilter(String filterName) {
+        try {
+            this.getSession().disableFilter(filterName);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Connection disconnect() throws HibernateException {
+        try {
+            return this.getSession().disconnect();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Filter enableFilter(String filterName) {
+        try {
+            return this.getSession().enableFilter(filterName);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void evict(Object object) throws HibernateException {
+        try {
+            this.getSession().evict(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void flush() throws HibernateException {
+        try {
+            this.getSession().flush();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object get(Class clazz, Serializable id) throws HibernateException {
+        try {
+            return this.getSession().get(clazz, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object get(Class clazz, Serializable id, LockMode lockMode) throws HibernateException {
+        try {
+            return this.getSession().get(clazz, id, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object get(String entityName, Serializable id) throws HibernateException {
+        try {
+            return this.getSession().get(entityName, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object get(String entityName, Serializable id, LockMode lockMode) throws HibernateException {
+        try {
+            return this.getSession().get(entityName, id, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public LockMode getCurrentLockMode(Object object) throws HibernateException {
+        try {
+            return this.getSession().getCurrentLockMode(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Filter getEnabledFilter(String filterName) {
+        try {
+            return this.getSession().getEnabledFilter(filterName);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public String getEntityName(Object object) throws HibernateException {
+        try {
+            return this.getSession().getEntityName(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public FlushMode getFlushMode() {
+        try {
+            return this.getSession().getFlushMode();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Serializable getIdentifier(Object object) throws HibernateException {
+        try {
+            return this.getSession().getIdentifier(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Query getNamedQuery(String queryName) throws HibernateException {
+        try {
+            return this.getSession().getNamedQuery(queryName);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public SessionFactory getSessionFactory() {
+        try {
+            return this.getSession().getSessionFactory();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public boolean isConnected() {
+        try {
+            return this.getSession().isConnected();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public boolean isDirty() throws HibernateException {
+        try {
+            return this.getSession().isDirty();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public boolean isOpen() {
+        try {
+            return this.getSession().isOpen();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object load(Class theClass, Serializable id) throws HibernateException {
+        try {
+            return this.getSession().load(theClass, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object load(Class theClass, Serializable id, LockMode lockMode) throws HibernateException {
+        try {
+            return this.getSession().load(theClass, id, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void load(Object object, Serializable id) throws HibernateException {
+        try {
+            this.getSession().load(object, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object load(String entityName, Serializable id) throws HibernateException {
+        try {
+            return this.getSession().load(entityName, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object load(String entityName, Serializable id, LockMode lockMode) throws HibernateException {
+        try {
+            return this.getSession().load(entityName, id, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void lock(Object object, LockMode lockMode) throws HibernateException {
+        try {
+            this.getSession().lock(object, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void lock(String entityEntity, Object object, LockMode lockMode) throws HibernateException {
+        try {
+            this.getSession().lock(entityEntity, object, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object merge(Object object) throws HibernateException {
+        try {
+            return this.getSession().merge(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Object merge(String entityName, Object object) throws HibernateException {
+        try {
+            return this.getSession().merge(entityName, object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void reconnect() throws HibernateException {
+        try {
+            this.getSession().reconnect();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void reconnect(Connection conn) throws HibernateException {
+        try {
+            this.getSession().reconnect(conn);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void refresh(Object object) throws HibernateException {
+        try {
+            this.getSession().refresh(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void refresh(Object object, LockMode lockMode) throws HibernateException {
+        try {
+            this.getSession().refresh(object, lockMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void replicate(Object object, ReplicationMode replicationMode) throws HibernateException {
+        try {
+            this.getSession().replicate(object, replicationMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void replicate(String entityName, Object object, ReplicationMode replicationMode) throws HibernateException {
+        try {
+            this.getSession().replicate(entityName, object, replicationMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Serializable save(Object object) throws HibernateException {
+        try {
+            return this.getSession().save(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void save(Object object, Serializable id) throws HibernateException {
+        try {
+            this.getSession().save(object, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Serializable save(String entityName, Object object) throws HibernateException {
+        try {
+            return this.getSession().save(entityName, object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void save(String entityName, Object object, Serializable id) throws HibernateException {
+        try {
+            this.getSession().save(entityName, object, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void saveOrUpdate(Object object) throws HibernateException {
+        try {
+            this.getSession().saveOrUpdate(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void saveOrUpdate(String entityName, Object object) throws HibernateException {
+        try {
+            this.getSession().saveOrUpdate(entityName, object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void setFlushMode(FlushMode value) {
+        try {
+            this.getSession().setFlushMode(value);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void update(Object object) throws HibernateException {
+        try {
+            this.getSession().update(object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void update(Object object, Serializable id) throws HibernateException {
+        try {
+            this.getSession().update(object, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void update(String entityName, Object object) throws HibernateException {
+        try {
+            this.getSession().update(entityName, object);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void update(String entityName, Object object, Serializable id) throws HibernateException {
+        try {
+            this.getSession().update(entityName, object, id);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public void setCacheMode(CacheMode cacheMode) {
+        try {
+            this.getSession().setCacheMode(cacheMode);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public CacheMode getCacheMode() {
+        try {
+            return this.getSession().getCacheMode();
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Criteria createCriteria(Class aClass, String s) {
+        try {
+            return this.getSession().createCriteria(aClass, s);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public Criteria createCriteria(String s, String s1) {
+        try {
+            return this.getSession().createCriteria(s, s1);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+
+    public SQLQuery createSQLQuery(String s) throws HibernateException {
+        try {
+            return this.getSession().createSQLQuery(s);
+        } catch (HibernateException ex) {
+            this.invalidateSession();
+            throw this.handleException(ex);
+        }
+    }
+}
Index: hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryDelegator.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryDelegator.java,v
retrieving revision 1.1
diff -u -r1.1 SessionFactoryDelegator.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryDelegator.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryDelegator.java	13 Feb 2005 08:21:14 -0000
@@ -1,137 +1,130 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import java.io.Serializable;
-import java.sql.Connection;
-import java.util.Map;
-
-import javax.naming.NamingException;
-import javax.naming.Reference;
-
-import org.hibernate.Databinder;
-import org.hibernate.HibernateException;
-import org.hibernate.Interceptor;
-import org.hibernate.SessionFactory;
-import org.hibernate.cfg.Configuration;
-import org.hibernate.classic.Session;
-import org.hibernate.exception.SQLExceptionConverter;
-import org.hibernate.metadata.ClassMetadata;
-import org.hibernate.metadata.CollectionMetadata;
-import org.hibernate.stat.Statistics;
-import org.picocontainer.PicoInitializationException;
-
-/**
- * Delegates everything to session factory obtained from confiuration. this
- * class is necessary because component adapters are really ugly when it comes
- * to scripting.
- * 
- * @author Konstantin Pribluda
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $
- */
-
-public class SessionFactoryDelegator implements SessionFactory {
-
-    private SessionFactory sessionFactory;
-
-    public SessionFactoryDelegator(Configuration configuration) {
-        try {
-            this.sessionFactory = configuration.buildSessionFactory();
-        } catch (HibernateException ex) {
-            throw new PicoInitializationException(ex);
-        }
-    }
-
-    public SessionFactory getSessionFactory() {
-        return this.sessionFactory;
-    }
-
-    public void close() throws HibernateException {
-        this.getSessionFactory().close();
-    }
-
-    public void evict(Class persistentClass) throws HibernateException {
-        this.getSessionFactory().evict(persistentClass);
-    }
-
-    public void evict(Class persistentClass, Serializable id) throws HibernateException {
-        this.getSessionFactory().evict(persistentClass, id);
-    }
-
-    public void evictCollection(String roleName) throws HibernateException {
-        this.getSessionFactory().evictCollection(roleName);
-    }
-
-    public void evictCollection(String roleName, Serializable id) throws HibernateException {
-        this.getSessionFactory().evictCollection(roleName, id);
-    }
-
-    public void evictQueries() throws HibernateException {
-        this.getSessionFactory().evictQueries();
-    }
-
-    public void evictQueries(String cacheRegion) throws HibernateException {
-        this.getSessionFactory().evictQueries(cacheRegion);
-
-    }
-
-    public Map getAllClassMetadata() throws HibernateException {
-        return this.getSessionFactory().getAllClassMetadata();
-    }
-
-    public Map getAllCollectionMetadata() throws HibernateException {
-        return this.getSessionFactory().getAllCollectionMetadata();
-    }
-
-    public ClassMetadata getClassMetadata(Class persistentClass) throws HibernateException {
-        return this.getSessionFactory().getClassMetadata(persistentClass);
-    }
-
-    public ClassMetadata getClassMetadata(String entityName) throws HibernateException {
-        return this.getSessionFactory().getClassMetadata(entityName);
-    }
-
-    public CollectionMetadata getCollectionMetadata(String roleName) throws HibernateException {
-        return this.getSessionFactory().getCollectionMetadata(roleName);
-    }
-
-    public Reference getReference() throws NamingException {
-        return this.getSessionFactory().getReference();
-    }
-
-    public SQLExceptionConverter getSQLExceptionConverter() {
-        return this.getSessionFactory().getSQLExceptionConverter();
-    }
-
-    public Statistics getStatistics() {
-        return this.getSessionFactory().getStatistics();
-    }
-
-    public Databinder openDatabinder() throws HibernateException {
-        return this.getSessionFactory().openDatabinder();
-    }
-
-    public Session openSession() throws HibernateException {
-        return this.getSessionFactory().openSession();
-    }
-
-    public Session openSession(Connection connection) {
-        return this.getSessionFactory().openSession(connection);
-    }
-
-    public Session openSession(Connection connection, Interceptor interceptor) {
-        return this.getSessionFactory().openSession(connection, interceptor);
-    }
-
-    public Session openSession(Interceptor interceptor) throws HibernateException {
-        return this.getSessionFactory().openSession(interceptor);
-    }
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.hibernate.Databinder;
+import org.hibernate.HibernateException;
+import org.hibernate.Interceptor;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.classic.Session;
+import org.hibernate.metadata.ClassMetadata;
+import org.hibernate.metadata.CollectionMetadata;
+import org.hibernate.stat.Statistics;
+import org.picocontainer.PicoInitializationException;
+
+import javax.naming.NamingException;
+import javax.naming.Reference;
+import java.io.Serializable;
+import java.sql.Connection;
+import java.util.Map;
+
+/**
+ * Delegates everything to session factory obtained from confiuration. this
+ * class is necessary because component adapters are really ugly when it comes
+ * to scripting.
+ * 
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $
+ */
+
+public class SessionFactoryDelegator implements SessionFactory {
+
+    private SessionFactory sessionFactory;
+
+    public SessionFactoryDelegator(Configuration configuration) {
+        try {
+            this.sessionFactory = configuration.buildSessionFactory();
+        } catch (HibernateException ex) {
+            throw new PicoInitializationException(ex);
+        }
+    }
+
+    public SessionFactory getSessionFactory() {
+        return this.sessionFactory;
+    }
+
+    public void close() throws HibernateException {
+        this.getSessionFactory().close();
+    }
+
+    public void evict(Class persistentClass) throws HibernateException {
+        this.getSessionFactory().evict(persistentClass);
+    }
+
+    public void evict(Class persistentClass, Serializable id) throws HibernateException {
+        this.getSessionFactory().evict(persistentClass, id);
+    }
+
+    public void evictCollection(String roleName) throws HibernateException {
+        this.getSessionFactory().evictCollection(roleName);
+    }
+
+    public void evictCollection(String roleName, Serializable id) throws HibernateException {
+        this.getSessionFactory().evictCollection(roleName, id);
+    }
+
+    public void evictQueries() throws HibernateException {
+        this.getSessionFactory().evictQueries();
+    }
+
+    public void evictQueries(String cacheRegion) throws HibernateException {
+        this.getSessionFactory().evictQueries(cacheRegion);
+    }
+
+    public Map getAllClassMetadata() throws HibernateException {
+        return this.getSessionFactory().getAllClassMetadata();
+    }
+
+    public Map getAllCollectionMetadata() throws HibernateException {
+        return this.getSessionFactory().getAllCollectionMetadata();
+    }
+
+    public ClassMetadata getClassMetadata(Class persistentClass) throws HibernateException {
+        return this.getSessionFactory().getClassMetadata(persistentClass);
+    }
+
+    public ClassMetadata getClassMetadata(String entityName) throws HibernateException {
+        return this.getSessionFactory().getClassMetadata(entityName);
+    }
+
+    public CollectionMetadata getCollectionMetadata(String roleName) throws HibernateException {
+        return this.getSessionFactory().getCollectionMetadata(roleName);
+    }
+
+    public Reference getReference() throws NamingException {
+        return this.getSessionFactory().getReference();
+    }
+
+    public Statistics getStatistics() {
+        return this.getSessionFactory().getStatistics();
+    }
+
+    public Databinder openDatabinder() throws HibernateException {
+        return this.getSessionFactory().openDatabinder();
+    }
+
+    public Session openSession() throws HibernateException {
+        return this.getSessionFactory().openSession();
+    }
+
+    public Session openSession(Connection connection) {
+        return this.getSessionFactory().openSession(connection);
+    }
+
+    public Session openSession(Connection connection, Interceptor interceptor) {
+        return this.getSessionFactory().openSession(connection, interceptor);
+    }
+
+    public Session openSession(Interceptor interceptor) throws HibernateException {
+        return this.getSessionFactory().openSession(interceptor);
+    }
+}
Index: hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryLifecycle.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryLifecycle.java,v
retrieving revision 1.1
diff -u -r1.1 SessionFactoryLifecycle.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryLifecycle.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/SessionFactoryLifecycle.java	15 Jan 2005 13:43:09 -0000
@@ -1,42 +1,42 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import org.hibernate.HibernateException;
-import org.hibernate.SessionFactory;
-import org.picocontainer.Startable;
-
-/**
- * Component organising lifecycle for session factory.
- * 
- * @author Konstantin Pribluda
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $ 
- */
-public class SessionFactoryLifecycle implements Startable {
-	SessionFactory sessionFactory;
-	
-	public SessionFactoryLifecycle(SessionFactory sessionFactory) {
-		this.sessionFactory = sessionFactory;
-	}
-	
-	public void start() {
-	}
-	
-	public void stop() {
-		try {
-		sessionFactory.close();
-		} catch(HibernateException ex) {
-			//swallow it? not sure what to do with it...
-		}
-	}
-}
-
-
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.hibernate.HibernateException;
+import org.hibernate.SessionFactory;
+import org.picocontainer.Startable;
+
+/**
+ * Component organising lifecycle for session factory.
+ * 
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $ 
+ */
+public class SessionFactoryLifecycle implements Startable {
+	SessionFactory sessionFactory;
+	
+	public SessionFactoryLifecycle(SessionFactory sessionFactory) {
+		this.sessionFactory = sessionFactory;
+	}
+	
+	public void start() {
+	}
+	
+	public void stop() {
+		try {
+		sessionFactory.close();
+		} catch(HibernateException ex) {
+			//swallow it? not sure what to do with it...
+		}
+	}
+}
+
+
Index: hibernate3/src/java/org/nanocontainer/hibernate3/SessionLifecycle.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/java/org/nanocontainer/hibernate3/SessionLifecycle.java,v
retrieving revision 1.1
diff -u -r1.1 SessionLifecycle.java
--- hibernate3/src/java/org/nanocontainer/hibernate3/SessionLifecycle.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/java/org/nanocontainer/hibernate3/SessionLifecycle.java	15 Jan 2005 13:43:16 -0000
@@ -1,43 +1,43 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the license.html file.                                                    *
- *                                                                           *
- * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import org.hibernate.HibernateException;
-import org.hibernate.Session;
-import org.picocontainer.Startable;
-
-/**
- * Component providing session lifecycle to be registered in container
- * containing session in question.
- * 
- * @author Konstantin Pribluda
- * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
- * @version $Revision: 1.1 $
- */
-public class SessionLifecycle implements Startable {
-    
-    private Session session;
-
-    public SessionLifecycle(Session session) {
-        this.session = session;
-    }
-
-    public void start() {
-    }
-
-    public void stop() {
-        try {
-            session.flush();
-            session.close();
-        } catch (HibernateException ex) {
-            // swallow it? not sure what to do with it...
-        }
-    }
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the license.html file.                                                    *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by Aslak Hellesoy and Paul Hammant   *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.hibernate.HibernateException;
+import org.hibernate.Session;
+import org.picocontainer.Startable;
+
+/**
+ * Component providing session lifecycle to be registered in container
+ * containing session in question.
+ * 
+ * @author Konstantin Pribluda
+ * @author Jose Peleteiro <juzepeleteiro@intelli.biz>
+ * @version $Revision: 1.0 $
+ */
+public class SessionLifecycle implements Startable {
+    
+    private Session session;
+
+    public SessionLifecycle(Session session) {
+        this.session = session;
+    }
+
+    public void start() {
+    }
+
+    public void stop() {
+        try {
+            session.flush();
+            session.close();
+        } catch (HibernateException ex) {
+            // swallow it? not sure what to do with it...
+        }
+    }
+}
Index: hibernate3/src/test/hibernate.cfg.xml
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/hibernate.cfg.xml,v
retrieving revision 1.1
diff -u -r1.1 hibernate.cfg.xml
--- hibernate3/src/test/hibernate.cfg.xml	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/hibernate.cfg.xml	13 Feb 2005 08:08:57 -0000
@@ -1,14 +1,14 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">    
-<hibernate-configuration>
-  <session-factory>
-    <property name="show_sql">false</property>
-    <property name="use_outer_join">false</property>
-    <property name="connection.driver_class">org.hsqldb.jdbcDriver</property>
-    <property name="connection.username">sa</property>
-    <property name="connection.password"/>
-    <property name="connection.url">jdbc:hsqldb:.</property>
-    <property name="dialect">net.sf.hibernate.dialect.HSQLDialect</property>
-    <mapping resource="hibernate.hbm.xml"/>
-  </session-factory>
-</hibernate-configuration>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">    
+<hibernate-configuration>
+  <session-factory>
+    <property name="show_sql">false</property>
+    <property name="use_outer_join">false</property>
+    <property name="connection.driver_class">org.hsqldb.jdbcDriver</property>
+    <property name="connection.username">sa</property>
+    <property name="connection.password"/>
+    <property name="connection.url">jdbc:hsqldb:.</property>
+    <property name="dialect">org.hibernate.dialect.HSQLDialect</property>
+    <mapping resource="hibernate.hbm.xml"/>
+  </session-factory>
+</hibernate-configuration>
Index: hibernate3/src/test/hibernate.hbm.xml
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/hibernate.hbm.xml,v
retrieving revision 1.1
diff -u -r1.1 hibernate.hbm.xml
--- hibernate3/src/test/hibernate.hbm.xml	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/hibernate.hbm.xml	13 Jan 2005 20:59:12 -0000
@@ -1,10 +1,10 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
-<hibernate-mapping>
-    <class name="org.nanocontainer.hibernate3.pojo.Pojo" table="pojo">
-        <id unsaved-value="null" name="id" type="java.lang.Integer" access="field">
-            <generator class="native"/>
-        </id>
-        <property name="foo" update="false" unique="true" not-null="true" insert="true" access="field"/>
-    </class>
-</hibernate-mapping>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+<hibernate-mapping>
+    <class name="org.nanocontainer.hibernate3.pojo.Pojo" table="pojo">
+        <id unsaved-value="null" name="id" type="java.lang.Integer" access="field">
+            <generator class="native"/>
+        </id>
+        <property name="foo" update="false" unique="true" not-null="true" insert="true" access="field"/>
+    </class>
+</hibernate-mapping>
Index: hibernate3/src/test/org/nanocontainer/hibernate3/ConstructableConfigurationTestCase.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/org/nanocontainer/hibernate3/ConstructableConfigurationTestCase.java,v
retrieving revision 1.1
diff -u -r1.1 ConstructableConfigurationTestCase.java
--- hibernate3/src/test/org/nanocontainer/hibernate3/ConstructableConfigurationTestCase.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/org/nanocontainer/hibernate3/ConstructableConfigurationTestCase.java	13 Jan 2005 22:26:11 -0000
@@ -1,33 +1,33 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the LICENSE.txt file.                                                     *
- *                                                                           *
- * Idea by Rachel Davies, Original code by various                           *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import org.nanocontainer.hibernate3.ConstructableConfiguration;
-
-import junit.framework.TestCase;
-
-/**
- * @author Konstantin Pribluda
- * @version $Revision: 1.1 $
- */
-public class ConstructableConfigurationTestCase extends TestCase {
-	
-	public void testDefaultConstruction() throws Exception {
-		ConstructableConfiguration config = new ConstructableConfiguration();
-		assertNotNull(config);
-	}
-	
-	public void testResourceConstruction()  throws Exception {
-		ConstructableConfiguration config = new ConstructableConfiguration("/hibernate.cfg.xml");
-		assertNotNull(config);
-	}
-}
-	
-
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the LICENSE.txt file.                                                     *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by various                           *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.nanocontainer.hibernate3.ConstructableConfiguration;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Konstantin Pribluda
+ * @version $Revision: 1.0 $
+ */
+public class ConstructableConfigurationTestCase extends TestCase {
+	
+	public void testDefaultConstruction() throws Exception {
+		ConstructableConfiguration config = new ConstructableConfiguration();
+		assertNotNull(config);
+	}
+	
+	public void testResourceConstruction()  throws Exception {
+		ConstructableConfiguration config = new ConstructableConfiguration("/hibernate.cfg.xml");
+		assertNotNull(config);
+	}
+}
+	
+
Index: hibernate3/src/test/org/nanocontainer/hibernate3/FailoverSessionDelegatorTestCase.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/org/nanocontainer/hibernate3/FailoverSessionDelegatorTestCase.java,v
retrieving revision 1.1
diff -u -r1.1 FailoverSessionDelegatorTestCase.java
--- hibernate3/src/test/org/nanocontainer/hibernate3/FailoverSessionDelegatorTestCase.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/org/nanocontainer/hibernate3/FailoverSessionDelegatorTestCase.java	14 Jan 2005 03:50:12 -0000
@@ -1,54 +1,54 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the LICENSE.txt file.                                                     *
- *                                                                           *
- * Idea by Rachel Davies, Original code by various                           *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import junit.framework.TestCase;
-
-import org.hibernate.HibernateException;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-import org.nanocontainer.hibernate3.pojo.Pojo;
-
-/**
- * Test case for failover session delegator
- * 
- * @author Konstantin Pribluda
- * @version $Revision: 1.1 $
- */
-public class FailoverSessionDelegatorTestCase extends TestCase {
-
-    public void testSessionCreationAndDisposal() throws Exception {
-
-        SessionFactory factory = (new ConstructableConfiguration()).buildSessionFactory();
-
-        FailoverSessionDelegator delegator = new FailoverSessionDelegator(factory);
-
-        Session session = delegator.getSession();
-        assertNotNull(session);
-
-        assertSame(session, delegator.getSession());
-
-        // test that closing invalidates session
-        delegator.close();
-        assertNotSame(session, delegator.getSession());
-
-        session = delegator.getSession();
-
-        // produce error
-        try {
-            assertNotNull(delegator.save(new Pojo()));
-            fail("did not bombed on hibernate error");
-        } catch (HibernateException ex) {
-            // that's ok
-        }
-        assertNotSame(session, delegator.getSession());
-
-    }
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the LICENSE.txt file.                                                     *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by various                           *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import junit.framework.TestCase;
+
+import org.hibernate.HibernateException;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.nanocontainer.hibernate3.pojo.Pojo;
+
+/**
+ * Test case for failover session delegator
+ * 
+ * @author Konstantin Pribluda
+ * @version $Revision: 1.0 $
+ */
+public class FailoverSessionDelegatorTestCase extends TestCase {
+
+    public void testSessionCreationAndDisposal() throws Exception {
+
+        SessionFactory factory = (new ConstructableConfiguration()).buildSessionFactory();
+
+        FailoverSessionDelegator delegator = new FailoverSessionDelegator(factory);
+
+        Session session = delegator.getSession();
+        assertNotNull(session);
+
+        assertSame(session, delegator.getSession());
+
+        // test that closing invalidates session
+        delegator.close();
+        assertNotSame(session, delegator.getSession());
+
+        session = delegator.getSession();
+
+        // produce error
+        try {
+            assertNotNull(delegator.save(new Pojo()));
+            fail("did not bombed on hibernate error");
+        } catch (HibernateException ex) {
+            // that's ok
+        }
+        assertNotSame(session, delegator.getSession());
+
+    }
+}
Index: hibernate3/src/test/org/nanocontainer/hibernate3/SessionFactoryLifecycleTestCase.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/org/nanocontainer/hibernate3/SessionFactoryLifecycleTestCase.java,v
retrieving revision 1.1
diff -u -r1.1 SessionFactoryLifecycleTestCase.java
--- hibernate3/src/test/org/nanocontainer/hibernate3/SessionFactoryLifecycleTestCase.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/org/nanocontainer/hibernate3/SessionFactoryLifecycleTestCase.java	13 Jan 2005 22:26:17 -0000
@@ -1,31 +1,31 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the LICENSE.txt file.                                                     *
- *                                                                           *
- * Idea by Rachel Davies, Original code by various                           *
- *****************************************************************************/
-package org.nanocontainer.hibernate3;
-
-import org.hibernate.SessionFactory;
-import org.jmock.Mock;
-import org.jmock.MockObjectTestCase;
-
-/**
- * Test that lifecycle closes session factory
- * 
- * @author Konstantin Pribluda
- * @version $Revision: 1.1 $
- */
-public class SessionFactoryLifecycleTestCase extends MockObjectTestCase {
-
-    public void testThatLifecycleCallsClose() throws Exception {
-        Mock sessionFactoryMock = mock(SessionFactory.class);
-        sessionFactoryMock.expects(once()).method("close").withNoArguments();
-
-        SessionFactoryLifecycle sfl = new SessionFactoryLifecycle((SessionFactory) sessionFactoryMock.proxy());
-        sfl.stop();
-    }
-}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the LICENSE.txt file.                                                     *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by various                           *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3;
+
+import org.hibernate.SessionFactory;
+import org.jmock.Mock;
+import org.jmock.MockObjectTestCase;
+
+/**
+ * Test that lifecycle closes session factory
+ * 
+ * @author Konstantin Pribluda
+ * @version $Revision: 1.0 $
+ */
+public class SessionFactoryLifecycleTestCase extends MockObjectTestCase {
+
+    public void testThatLifecycleCallsClose() throws Exception {
+        Mock sessionFactoryMock = mock(SessionFactory.class);
+        sessionFactoryMock.expects(once()).method("close").withNoArguments();
+
+        SessionFactoryLifecycle sfl = new SessionFactoryLifecycle((SessionFactory) sessionFactoryMock.proxy());
+        sfl.stop();
+    }
+}
Index: hibernate3/src/test/org/nanocontainer/hibernate3/pojo/Pojo.java
===================================================================
RCS file: /home/projects/picocontainer/scm/java/hibernate3/src/test/org/nanocontainer/hibernate3/pojo/Pojo.java,v
retrieving revision 1.1
diff -u -r1.1 Pojo.java
--- hibernate3/src/test/org/nanocontainer/hibernate3/pojo/Pojo.java	22 Jan 2005 15:30:49 -0000	1.1
+++ hibernate3/src/test/org/nanocontainer/hibernate3/pojo/Pojo.java	13 Jan 2005 22:23:10 -0000
@@ -1,38 +1,38 @@
-/*****************************************************************************
- * Copyright (c) PicoContainer Organization. All rights reserved.            *
- * ------------------------------------------------------------------------- *
- * The software in this package is published under the terms of the BSD      *
- * style license a copy of which has been included with this distribution in *
- * the LICENSE.txt file.                                                     *
- *                                                                           *
- * Idea by Rachel Davies, Original code by various                           *
- *****************************************************************************/
-package org.nanocontainer.hibernate3.pojo;
-
-/**
- * Just a pojo to make hibernate happy. 
- * @author Konstantin Pribluda
- * @version $Revision: 1.1 $
- */
-
-public class Pojo {
-	
-	Integer id;
-	String foo;
-	
-	public Pojo() {
-	}
-	
-	public Integer getId() {
-		return id;
-	}
-	
-	
-	public String getFoo() {
-		return foo;
-	}
-	
-	public void setFoo(String foo) {
-		this.foo = foo;
-	}
+/*****************************************************************************
+ * Copyright (c) PicoContainer Organization. All rights reserved.            *
+ * ------------------------------------------------------------------------- *
+ * The software in this package is published under the terms of the BSD      *
+ * style license a copy of which has been included with this distribution in *
+ * the LICENSE.txt file.                                                     *
+ *                                                                           *
+ * Idea by Rachel Davies, Original code by various                           *
+ *****************************************************************************/
+package org.nanocontainer.hibernate3.pojo;
+
+/**
+ * Just a pojo to make hibernate happy. 
+ * @author Konstantin Pribluda
+ * @version $Revision: 1.0 $
+ */
+
+public class Pojo {
+	
+	Integer id;
+	String foo;
+	
+	public Pojo() {
+	}
+	
+	public Integer getId() {
+		return id;
+	}
+	
+	
+	public String getFoo() {
+		return foo;
+	}
+	
+	public void setFoo(String foo) {
+		this.foo = foo;
+	}
 }
