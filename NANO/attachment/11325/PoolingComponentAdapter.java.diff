Index: src/java/org/picoextras/pool2/PoolingComponentAdapter.java
===================================================================
RCS file: /cvsroot/picocontainer/picoextras/pool2/src/java/org/picoextras/pool2/PoolingComponentAdapter.java,v
retrieving revision 1.3
diff -u -u -r1.3 PoolingComponentAdapter.java
--- src/java/org/picoextras/pool2/PoolingComponentAdapter.java	29 Jan 2004 02:44:15 -0000	1.3
+++ src/java/org/picoextras/pool2/PoolingComponentAdapter.java	3 Feb 2004 23:19:49 -0000
@@ -20,11 +20,11 @@
 
     /**
      * @param delegate The delegate adapter that provides the pooled instances.
-     * @param maxPoolSize maximum pool size.
+     * @param maxPoolSize maximum pool size. A size of -1 results in an ever growing pool.
      * @param waitMilliSeconds number of milliseconds to wait when {@link #getComponentInstance(MutablePicoContainer) }
      * is called. Three different values are possible here:
      * <ul>
-     * <li>-1 : Grow when exhausted.</li>
+     * <li>-1 : Wait when exhausted until a component is available.</li>
      * <li>0 : Fail immediately when exhausted.</li>
      * <li>n : Wait for max n milliseconds until a component is available. This will fail on timeout.</li>
      * </ul>
@@ -50,13 +50,16 @@
             componentInstance = available.remove(0);
         } else {
             // none available. grow or wait.
-            if (getTotalSize() < maxPoolSize) {
+            if (maxPoolSize < 0 || getTotalSize() < maxPoolSize) {
                 componentInstance = super.getComponentInstance();
             } else {
                 // can't grow more. wait for one to become available.
                 try {
                     if(waitMilliSeconds > 0) {
                         wait(waitMilliSeconds);
+                    }
+                    if(waitMilliSeconds < 0) {
+                        wait();
                     }
                     componentInstance = available.remove(0);
                 } catch (IndexOutOfBoundsException e) {
